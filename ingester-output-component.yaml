name: Ingest bigquery dataset into tfrecord
inputs:
- {name: project_id, type: String}
- {name: bigquery_table_id, type: String}
- {name: tfrecord_file, type: String}
- {name: bigquery_max_rows, type: Integer, optional: true}
outputs:
- {name: tfrecord_file, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'google-cloud-bigquery==2.20.0' 'tensorflow==2.5.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.20.0'
      'tensorflow==2.5.0' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def ingest_bigquery_dataset_into_tfrecord(
          project_id,
          bigquery_table_id,
          tfrecord_file,
          bigquery_max_rows = None
      ):

        # pylint: disable=g-import-not-at-top
        import collections
        from typing import Optional

        from google.cloud import bigquery

        import tensorflow as tf
        import logging

        def read_data_from_bigquery(
            project_id,
            bigquery_table_id,
            bigquery_max_rows):

          # Construct a BigQuery client object.
          client = bigquery.Client(project=project_id)

          # Get dataset.
          query_job = client.query(
              f"""
              SELECT * FROM `{bigquery_table_id}`
              """
          )
          table = query_job.result(max_results=bigquery_max_rows)

          return table

        def _bytes_feature(tensor):

          value = tf.io.serialize_tensor(tensor)
          if isinstance(value, type(tf.constant(0))):
            value = value.numpy()
          return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

        def build_example(data_row):
          feature = {
              "step_type":
                  _bytes_feature(data_row.get("step_type")),
              "observation":
                  _bytes_feature([
                      observation["observation_batch"]
                      for observation in data_row.get("observation")
                  ]),
              "action":
                  _bytes_feature(data_row.get("action")),
              "policy_info":
                  _bytes_feature(data_row.get("policy_info")),
              "next_step_type":
                  _bytes_feature(data_row.get("next_step_type")),
              "reward":
                  _bytes_feature(data_row.get("reward")),
              "discount":
                  _bytes_feature(data_row.get("discount")),
          }
          example_proto = tf.train.Example(
              features=tf.train.Features(feature=feature))
          return example_proto

        def write_tfrecords(
            tfrecord_file,
            table):

          with tf.io.TFRecordWriter(tfrecord_file) as writer:
            for data_row in table:
              example = build_example(data_row)
              writer.write(example.SerializeToString())

        table = read_data_from_bigquery(
            project_id=project_id,
            bigquery_table_id=bigquery_table_id,
            bigquery_max_rows=bigquery_max_rows)

        logging.info("writing records------------------")

        write_tfrecords(tfrecord_file, table)

        outputs = collections.namedtuple(
            "Outputs",
            ["tfrecord_file"])
        logging.info(outputs)

        return outputs(tfrecord_file)

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                  str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Ingest bigquery dataset into tfrecord', description='')
      _parser.add_argument("--project-id", dest="project_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--bigquery-table-id", dest="bigquery_table_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--tfrecord-file", dest="tfrecord_file", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--bigquery-max-rows", dest="bigquery_max_rows", type=int, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = ingest_bigquery_dataset_into_tfrecord(**_parsed_args)

      _output_serializers = [
          _serialize_str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --project-id
    - {inputValue: project_id}
    - --bigquery-table-id
    - {inputValue: bigquery_table_id}
    - --tfrecord-file
    - {inputValue: tfrecord_file}
    - if:
        cond: {isPresent: bigquery_max_rows}
        then:
        - --bigquery-max-rows
        - {inputValue: bigquery_max_rows}
    - '----output-paths'
    - {outputPath: tfrecord_file}
